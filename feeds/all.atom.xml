<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sandesh's Blog</title><link href="https://sandeshdaundkar.com/" rel="alternate"></link><link href="https://sandeshdaundkar.com/feeds/all.atom.xml" rel="self"></link><id>https://sandeshdaundkar.com/</id><updated>2020-10-10T00:00:00+05:30</updated><subtitle>Python Django Developer</subtitle><entry><title>Learning ES6 For React - Part One</title><link href="https://sandeshdaundkar.com/learning-es6-for-react-part-one.html" rel="alternate"></link><published>2020-10-10T00:00:00+05:30</published><updated>2020-10-10T00:00:00+05:30</updated><author><name>Sandesh Daundkar</name></author><id>tag:sandeshdaundkar.com,2020-10-10:/learning-es6-for-react-part-one.html</id><summary type="html">&lt;p&gt;In this post, I will introduce you to variables and arrow functions in ES6.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;ECMAScript is Eurpoean standard for JavaScript, AppleScript &amp;amp; JScript.&lt;/em&gt;
&lt;em&gt;ECMAScript 2015 also known as ES6, is one such JavaScript standard, which adds significant new features for developing complex applications.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently, started learning React, and came across the javascript standard used widely for developing React applications. I assume you already have
little experience with JS. Most of the latest browsers support the ES6 Syntax, so if you wish to try the snippets, you can start the developer console and try 'em.
In this section, we will see how we can declare variables and write compact functions using ES6 syntax.&lt;/p&gt;
&lt;h1&gt;Variables&lt;/h1&gt;
&lt;p&gt;In ES6 you can declare variables using either of the three keywords &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;, depending on the scope of the variable.
Scope of the variable is nothing but the visibility of the variable within the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Declaring variables&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ecmascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;var&lt;/code&gt; is used in case you want to declare variable in global/local scope.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; allows you to declare variables, within the scope of the block, statement or expression in which they are declared. &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Understanding Scope&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;localScope&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JavaScript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// considered as same variable inside/outside the if-statement block&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;restrictedScope&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ES6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;standard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ECMAScript 2015&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// considered as new variable inside the if-statement block&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;standard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;standard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;globalScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;restrictedScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The scope of the variables declared using &lt;code&gt;const&lt;/code&gt; is similar to that of &lt;code&gt;let&lt;/code&gt;, except that such variables cannot be re-assigned(immutable).
You should use &lt;code&gt;const&lt;/code&gt; if the value of that variable is not going to vary later in the program. &lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Constants cannot be re-assigned&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// raises TypeError: Assignment to constant variable.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;Arrow Functions&lt;/h1&gt;
&lt;p&gt;Functions are basically resuable block of code. ES6 introduced a compact way to declare javascript functions.&lt;/p&gt;
&lt;p&gt;The syntax for writing arrow functions is as below&lt;/p&gt;
&lt;p&gt;&lt;code&gt;functionName = (parameters) =&amp;gt; {return statement};&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let's see an example of defining functions using JS and ES6&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// functions in javascript&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The same function can be written in compact form using arrow functions&lt;/span&gt;

&lt;span class="nx"&gt;addNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also write arrow functions alternatively, depending on the number of parameters in the function and the statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can omit parentheses &lt;strong&gt;if and only if&lt;/strong&gt; you have only one parameter. &lt;br&gt;&lt;code&gt;square = number =&amp;gt; {return number * number}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can omit the return statement and curly braces, &lt;strong&gt;if and only if&lt;/strong&gt; all you do is return something. &lt;br&gt; &lt;code&gt;square = number =&amp;gt; number * number;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If a function takes no parameters, &lt;strong&gt;empty parentheses&lt;/strong&gt; is mandatory. &lt;br&gt; &lt;code&gt;greet = () =&amp;gt; {console.log("Welcome to my blog")}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If a function takes &lt;strong&gt;more than one parameter&lt;/strong&gt;, parentheses is mandatory. &lt;br&gt; &lt;code&gt;sum = (a,b) =&amp;gt; {return a+b}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope you enjoyed the post.&lt;/p&gt;
&lt;p&gt;In the next post, we will see how you can create classes in javascript using ES6.&lt;/p&gt;
&lt;p&gt;I will be integrating &lt;a href="https://disqus.com/"&gt;disqus&lt;/a&gt; later for comments on the posts, meanwhile feel free to write me on my &lt;a href="mailto:me@sandeshdaundkar.com"&gt;email&lt;/a&gt;.&lt;/p&gt;</content><category term="frontend"></category><category term="frontend"></category><category term="javascript"></category></entry><entry><title>Just Launched</title><link href="https://sandeshdaundkar.com/just-launched.html" rel="alternate"></link><published>2020-10-08T00:00:00+05:30</published><updated>2020-10-08T00:00:00+05:30</updated><author><name>Sandesh Daundkar</name></author><id>tag:sandeshdaundkar.com,2020-10-08:/just-launched.html</id><summary type="html">&lt;p&gt;Welcome Aboard! This blog is launched on my 27th Birthday.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is yet to be written.&lt;/p&gt;</content><category term="misc"></category><category term="first"></category><category term="misc"></category></entry></feed>